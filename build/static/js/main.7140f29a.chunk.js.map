{"version":3,"sources":["component/note/Note.js","services/notes.js","component/notification/Notification.js","component/footer/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","exportObject","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","Notification","message","Footer","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"yMAWeA,EATF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,qBAAIC,UAAU,OAAd,UAAsBJ,EAAKK,QAC3B,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCJlCK,EAAU,aA4BDC,EAHM,CACnBC,OAxBa,WAQb,OAPgBC,IAAMC,IAAIJ,GAOXK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAgBjCC,OAbK,SAAAC,GAEb,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAWzBI,OARH,SAACC,EAAIH,GAElB,OADgBN,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAMH,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCb5BO,G,MATM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAEnB,OACI,qBAAKlB,UAAU,QAAf,SACKkB,MCIEC,EARA,WACX,OACI,qBAAKnB,UAAU,SAAf,SACI,kEC+FKoB,EA1FH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAGAC,qBAAU,WACRC,EACG1B,SACAG,MAAK,SAAAwB,GACNT,EAASS,QAEV,IAEH,IAwCMC,EAAcP,EAClBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAE5B,OACE,sBAAKC,UAAU,MAAf,UACE,uCACA,cAAC,EAAD,CAAckB,QAASU,IACvB,8BACE,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAIlC,6BACGO,EAAYE,KAAI,SAAAvC,GAAI,OACjB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA3CH,SAAAkB,GACzB,IAAMnB,EAAO0B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAEtB,KAAOA,KAChCuB,EAAW,2BAAQ1C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDgC,EACCjB,OAAOC,EAAIuB,GAAa9B,MAAK,SAAA+B,GAC5BhB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKmB,KAAOA,EAAKnB,EAAO2C,SAEpDC,OAAM,SAAAC,GACLZ,EAAgB,aAAD,OACAjC,EAAKK,QADL,sCAGfyC,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAEtB,KAAOA,SA4BJ4B,CAAmB/C,EAAKmB,MAF3CnB,EAAKmB,SAOlB,uBAAM6B,SAhEM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB9C,QAASuB,EACTwB,MAAM,IAAIC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,IAG7BrB,EACGpB,OAAOoC,GACLvC,MAAK,SAAA+B,GACNhB,EAASD,EAAM+B,OAAOd,IACtBd,EAAW,QAoDb,UACE,uBACE6B,MAAO9B,EACP+B,SAhCiB,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB7B,EAAWoB,EAAMa,OAAOJ,UAgCpB,wBAAQK,KAAK,SAAb,qBAEF,cAAC,EAAD,QCzFRC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.7140f29a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important';\r\n  return (\r\n    <li className=\"note\">{note.content}\r\n    <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note;","  \r\nimport axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  // const nonExisting = {\r\n  //   id: 10000,\r\n  //   content: 'This note is not saved to server',\r\n  //   date: '2019-05-30T17:30:31.098Z',\r\n  //   important: true,\r\n  // }\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n// eslint-disable-next-line\r\n\r\nconst exportObject = { \r\n  getAll, create, update\r\n};\r\nexport default exportObject;","const Notification = ({message}) => {\r\n    \r\n    return ( \r\n        <div className=\"error\">\r\n            {message}\r\n    </div>\r\n     );\r\n}\r\n \r\nexport default Notification;","const Footer = () => {\r\n    return ( \r\n        <div className=\"footer\">\r\n            <h2>Note app... Fullstackpen 2021</h2>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Footer;","import React, { useState, useEffect } from 'react'\nimport Note from './component/note/Note'\nimport noteService from './services/notes'\nimport './App.css'\nimport Notification from './component/notification/Notification'\nimport Footer from './component/footer/Footer'\n\n\n  const App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(false)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n\n    useEffect(() => {\n      noteService\n        .getAll()\n        .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n    }, [])\n  \n    const addNote = (event) => {\n      event.preventDefault()\n      const noteObject = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() > 0.5,\n      }\n  \n      noteService\n        .create(noteObject)\n          .then(returnedNote => {\n          setNotes(notes.concat(returnedNote))\n          setNewNote('')\n        })\n    }\n  \n    const toggleImportanceOf = id => {\n      const note = notes.find(n => n.id === id)\n      const changedNote = { ...note, important: !note.important }\n    \n      noteService\n      .update(id, changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `the note '${note.content}' was already deleted from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000);\n        setNotes(notes.filter(n => n.id !== id))\n      })    \n    }\n  \n    const handleNoteChange = (event) => {\n      console.log(event.target.value)\n      setNewNote(event.target.value)\n    }\n  \n    const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n  \n    return (\n      <div className='App'>\n        <h1>Notes</h1>\n        <Notification message={errorMessage}/>\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all' }\n          </button>\n        </div>   \n\n        <ul>\n          {notesToShow.map(note => \n              <Note\n                key={note.id}\n                note={note} \n                toggleImportance={() => toggleImportanceOf(note.id)}\n              />\n          )}\n        </ul>\n\n        <form onSubmit={addNote}>\n          <input\n            value={newNote}\n            onChange={handleNoteChange}\n          />\n          <button type=\"submit\">save</button>\n        </form>  \n        <Footer />\n      </div>\n    )\n  }\n  export default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}